{"version":3,"sources":["svg/monitor.svg","svg/keyboard_resized.svg","pages/Main.js","pages/About.js","pages/Experience.js","pages/Projects.js","pages/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Main","react_default","a","createElement","id","className","src","monitor","alt","Component","About","Experience","Projects","Contact","anchors","Fullpages","react_fullpage_default","menu","sectionsColor","render","_ref","state","fullpageApi","pages_Main","pages_About","pages_Experience","pages_Projects","pages_Contact","Navbar","data-menuanchor","href","Logo","logo","App","App_Logo","App_Navbar","App_Fullpages","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb51e5fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/monitor.244ff747.svg\";","module.exports = __webpack_public_path__ + \"static/media/keyboard_resized.e5178e10.svg\";","import React, { Component } from 'react';\r\nimport '../css/main.css';\r\nimport monitor from '../svg/monitor.svg';\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"section-main\" className=\"section\">\r\n                <div className=\"flex\">\r\n                    <div className=\"flex-item\">\r\n                        <img src={monitor} alt=\"monitor\" />\r\n                    </div>\r\n                    <div className=\"flex-item\">\r\n                        <h1>Hello!</h1>\r\n                        <p>This is currently a work in progress. Please come back another time!</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\n//import '../css/About.css';\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"section\">\r\n                <h1>About Me</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;\r\n\r\n","import React, { Component } from 'react';\r\n//import '../css/Experience.css';\r\n\r\nclass Experience extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"section\">\r\n                <h1>Experience</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Experience;\r\n\r\n","import React, { Component } from 'react';\r\n//import '../css/Projects.css';\r\n\r\nclass Projects extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"section\">\r\n                <h1>Projects</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Projects;\r\n\r\n","import React, { Component } from 'react';\r\n//import '../css/Contact.css';\r\n\r\nclass Contact extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"section\">\r\n                <h1>Contact Me</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;\r\n\r\n","import React, { Component } from 'react';\n//import Navbar from './Navbar';\n//import Fullpage from './components/Fullpage';\nimport ReactFullpage from '@fullpage/react-fullpage';\nimport Main from './pages/Main.js';\nimport About from './pages/About.js';\nimport Experience from './pages/Experience.js';\nimport Projects from './pages/Projects.js';\nimport Contact from './pages/Contact.js';\n//import './css/loader.css';\nimport './App.css';\nimport logo from './svg/keyboard_resized.svg';\n\nconst anchors = [\"Home\", \"About\", \"Experience\", \"Projects\", \"Contact\"];\n\nconst Fullpages = () => (\n    <ReactFullpage \n        menu='#menu'\n        anchors={anchors}\n        \n        sectionsColor={['#edece8', '#acdcd9', '#acc7dc', '#acafdc', '']}\n        render={({state, fullpageApi}) => {\n            return(\n                <div id='fullpage'>\n                    <Main />\n                    <About />\n                    <Experience />\n                    <Projects />\n                    <Contact />\n                </div>\n            );\n        }}\n    />\n);\n\nconst Navbar = () => (\n  <ul id='menu' className=\"hide\">\n    <li data-menuanchor=\"Home\" className=\"active\"><a href=\"#Home\">HOME</a></li>\n    <li data-menuanchor=\"About\"><a href='#About'>ABOUT</a></li>\n    <li data-menuanchor=\"Experience\"><a href='#Experience'>EXPERIENCE</a></li>\n    <li data-menuanchor=\"Projects\"><a href='#Projects'>PROJECTS</a></li>\n    <li data-menuanchor=\"Contact\"><a href='#Contact'>CONTACT ME</a></li>\n  </ul>\n);\n\nconst Logo = () => (\n  <div id=\"logo\">\n    <img className=\"item\" src={logo} alt=\"mouse and keyboard\" href=\"https://danielglee.me#Home\" />\n    <div className=\"item\" >Daniel G Lee</div>\n  </div>\n);\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className='App'>\n        <Logo />\n        <Navbar />\n        <Fullpages />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}